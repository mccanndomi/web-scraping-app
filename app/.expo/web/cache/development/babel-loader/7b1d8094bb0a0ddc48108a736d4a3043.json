{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dommccann/Documents/Personal/git/web-scraping-app/app/components/LinkPreview.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { getLinkPreview } from \"link-preview-js\";\nimport { useTheme } from \"@react-navigation/native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport * as Linking from \"expo-linking\";\n\nvar LinkPreview = function LinkPreview(props) {\n  var _useTheme = useTheme(),\n      dark = _useTheme.dark,\n      colors = _useTheme.colors;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      linkData = _useState2[0],\n      setLinkData = _useState2[1];\n\n  useEffect(function () {\n    getData();\n  }, []);\n\n  function getData() {\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            getLinkPreview(props.url).then(function (data) {\n              return setLinkData(data);\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return Linking.openURL(linkData.url);\n    },\n    style: [styles.container, {\n      backgroundColor: colors.background,\n      borderColor: dark ? \"#2b2b2b\" : \"#dbdbdb\"\n    }]\n  }, React.createElement(View, {\n    style: styles.imagePreview\n  }, React.createElement(ImageBackground, {\n    style: styles.image,\n    imageStyle: {\n      borderTopLeftRadius: 8,\n      borderBottomLeftRadius: 8\n    },\n    source: {\n      uri: linkData.hasOwnProperty(\"images\") ? linkData.images[0] : \" \"\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: \"flex-end\",\n      justifyContent: \"flex-end\"\n    }\n  }, React.createElement(MaterialCommunityIcons, {\n    name: \"link-variant\",\n    size: 100,\n    color: \"rgba(255, 255, 255, 0.1)\"\n  })))), React.createElement(View, {\n    style: styles.bodyPreview\n  }, React.createElement(View, {\n    style: styles.titleArea\n  }, React.createElement(Text, {\n    style: [styles.title, {\n      color: colors.text\n    }],\n    numberOfLines: 1\n  }, linkData.title)), React.createElement(View, {\n    style: styles.descriptionArea\n  }, React.createElement(Text, {\n    style: styles.description,\n    numberOfLines: 3\n  }, linkData.description))));\n};\n\nexport { LinkPreview };\nvar styles = StyleSheet.create({\n  image: {\n    width: 100,\n    height: 100\n  },\n  imagePreview: {},\n  bodyPreview: {\n    justifyContent: \"space-evenly\",\n    flexShrink: 1,\n    padding: 8\n  },\n  titleArea: {\n    flexShrink: 1\n  },\n  title: {\n    fontWeight: \"600\",\n    fontSize: 16\n  },\n  descriptionArea: {},\n  description: {\n    color: \"#949494\"\n  },\n  container: {\n    margin: 10,\n    borderRadius: 8,\n    flexDirection: \"row\",\n    borderWidth: 1\n  }\n});","map":{"version":3,"sources":["/Users/dommccann/Documents/Personal/git/web-scraping-app/app/components/LinkPreview.js"],"names":["React","useState","useEffect","getLinkPreview","useTheme","MaterialCommunityIcons","Linking","LinkPreview","props","dark","colors","linkData","setLinkData","getData","url","then","data","openURL","styles","container","backgroundColor","background","borderColor","imagePreview","image","borderTopLeftRadius","borderBottomLeftRadius","uri","hasOwnProperty","images","flex","alignItems","justifyContent","bodyPreview","titleArea","title","color","text","descriptionArea","description","StyleSheet","create","width","height","flexShrink","padding","fontWeight","fontSize","margin","borderRadius","flexDirection","borderWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"; //Baskerville, Bodoni 72, Didot, Times New Roman\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ImageBackground,\n  TouchableOpacity,\n} from \"react-native\";\nimport { getLinkPreview } from \"link-preview-js\";\nimport { useTheme } from \"@react-navigation/native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport * as Linking from \"expo-linking\";\n\nconst LinkPreview = (props) => {\n  const { dark, colors } = useTheme();\n  const [linkData, setLinkData] = useState({});\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  async function getData() {\n    getLinkPreview(props.url).then((data) => setLinkData(data));\n  }\n\n  return (\n    <TouchableOpacity\n      onPress={() => Linking.openURL(linkData.url)}\n      style={[\n        styles.container,\n        {\n          backgroundColor: colors.background,\n          borderColor: dark ? \"#2b2b2b\" : \"#dbdbdb\",\n        },\n      ]}\n    >\n      <View style={styles.imagePreview}>\n        <ImageBackground\n          style={styles.image}\n          imageStyle={{\n            borderTopLeftRadius: 8,\n            borderBottomLeftRadius: 8,\n          }}\n          source={{\n            uri: linkData.hasOwnProperty(\"images\") ? linkData.images[0] : \" \",\n          }}\n        >\n          <View\n            style={{\n              flex: 1,\n              alignItems: \"flex-end\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            <MaterialCommunityIcons\n              name=\"link-variant\"\n              size={100}\n              color=\"rgba(255, 255, 255, 0.1)\"\n            />\n          </View>\n        </ImageBackground>\n      </View>\n      <View style={styles.bodyPreview}>\n        <View style={styles.titleArea}>\n          <Text\n            style={[styles.title, { color: colors.text }]}\n            numberOfLines={1}\n          >\n            {linkData.title}\n          </Text>\n        </View>\n        <View style={styles.descriptionArea}>\n          <Text style={styles.description} numberOfLines={3}>\n            {linkData.description}\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport { LinkPreview };\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 100,\n    height: 100,\n  },\n  imagePreview: {},\n  bodyPreview: { justifyContent: \"space-evenly\", flexShrink: 1, padding: 8 },\n  titleArea: { flexShrink: 1 },\n  title: { fontWeight: \"600\", fontSize: 16 },\n  descriptionArea: {},\n  description: { color: \"#949494\" },\n  container: {\n    margin: 10,\n    borderRadius: 8,\n    flexDirection: \"row\",\n    borderWidth: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}