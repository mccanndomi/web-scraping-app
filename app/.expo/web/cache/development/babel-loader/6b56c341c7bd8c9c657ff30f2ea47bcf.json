{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/dommccann/Documents/Personal/git/web-scraping-app/app/App.js\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport Feed from \"./pages/Feed\";\nimport Thread from \"./pages/Thread\";\nimport { DefaultTheme, DarkTheme } from \"@react-navigation/native\";\nimport { PreferencesContext } from \"./services/PreferencesContext\";\nimport { LogoTitle } from \"./components/LogoTitle\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nvar Stack = createStackNavigator();\nvar Drawer = createDrawerNavigator();\nexport default function App() {\n  var _this = this;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isThemeDark = _React$useState2[0],\n      setIsThemeDark = _React$useState2[1];\n\n  var theme = isThemeDark ? DarkTheme : DefaultTheme;\n  var toggleTheme = React.useCallback(function () {\n    return setIsThemeDark(!isThemeDark);\n  }, [isThemeDark]);\n  var preferences = React.useMemo(function () {\n    return {\n      toggleTheme: toggleTheme,\n      isThemeDark: isThemeDark\n    };\n  }, [toggleTheme, isThemeDark]);\n  return React.createElement(PreferencesContext.Provider, {\n    value: preferences\n  }, React.createElement(NavigationContainer, {\n    theme: theme\n  }, React.createElement(Stack.Navigator, {\n    initialRouteName: \"Feed\",\n    mode: \"card\",\n    screenOptions: {\n      headerShown: true,\n      gestureEnabled: true,\n      gestureDirection: \"horizontal\",\n      gestureResponseDistance: {\n        horizontal: 300\n      },\n      cardStyleInterpolator: function cardStyleInterpolator(_ref) {\n        var current = _ref.current,\n            layouts = _ref.layouts;\n        return {\n          cardStyle: {\n            transform: [{\n              translateX: current.progress.interpolate({\n                inputRange: [0, 1],\n                outputRange: [layouts.screen.width, 0]\n              })\n            }]\n          },\n          overlayStyle: {\n            opacity: current.progress.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 0.5]\n            })\n          }\n        };\n      }\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Feed\",\n    component: Feed,\n    options: {\n      headerTitleAlign: \"center\",\n      headerTitle: function headerTitle(props) {\n        return React.createElement(LogoTitle, {\n          color: theme.colors.text\n        });\n      },\n      headerLeft: function headerLeft() {\n        return React.createElement(TouchableOpacity, {\n          style: styles.headerIcon,\n          onPress: function onPress() {\n            return toggleTheme();\n          }\n        }, React.createElement(MaterialCommunityIcons, {\n          name: isThemeDark ? \"white-balance-sunny\" : \"weather-night\",\n          size: 30,\n          color: theme.colors.text\n        }));\n      }\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Thread\",\n    component: Thread,\n    options: {\n      headerShown: false\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  headerIcon: {\n    marginHorizontal: 20\n  }\n});","map":{"version":3,"sources":["/Users/dommccann/Documents/Personal/git/web-scraping-app/app/App.js"],"names":["StatusBar","React","NavigationContainer","createStackNavigator","createDrawerNavigator","Feed","Thread","DefaultTheme","DarkTheme","PreferencesContext","LogoTitle","MaterialCommunityIcons","Stack","Drawer","App","useState","isThemeDark","setIsThemeDark","theme","toggleTheme","useCallback","preferences","useMemo","headerShown","gestureEnabled","gestureDirection","gestureResponseDistance","horizontal","cardStyleInterpolator","current","layouts","cardStyle","transform","translateX","progress","interpolate","inputRange","outputRange","screen","width","overlayStyle","opacity","headerTitleAlign","headerTitle","props","colors","text","headerLeft","styles","headerIcon","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","marginHorizontal"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { StyleSheet, TouchableOpacity } from \"react-native\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport Feed from \"./pages/Feed\";\nimport Thread from \"./pages/Thread\";\nimport { DefaultTheme, DarkTheme } from \"@react-navigation/native\";\nimport { PreferencesContext } from \"./services/PreferencesContext\";\nimport { LogoTitle } from \"./components/LogoTitle\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\n\nconst Stack = createStackNavigator();\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  const [isThemeDark, setIsThemeDark] = React.useState(false);\n  let theme = isThemeDark ? DarkTheme : DefaultTheme;\n\n  const toggleTheme = React.useCallback(() => {\n    return setIsThemeDark(!isThemeDark);\n  }, [isThemeDark]);\n\n  const preferences = React.useMemo(\n    () => ({\n      toggleTheme,\n      isThemeDark,\n    }),\n    [toggleTheme, isThemeDark]\n  );\n\n  return (\n    <PreferencesContext.Provider value={preferences}>\n      <NavigationContainer theme={theme}>\n        <Stack.Navigator\n          initialRouteName=\"Feed\"\n          mode=\"card\"\n          screenOptions={{\n            headerShown: true,\n            gestureEnabled: true,\n            // if you want to change the back swipe width\n            gestureDirection: \"horizontal\",\n            gestureResponseDistance: {\n              horizontal: 300,\n            },\n            cardStyleInterpolator: ({ current, layouts }) => {\n              return {\n                cardStyle: {\n                  transform: [\n                    {\n                      translateX: current.progress.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layouts.screen.width, 0],\n                      }),\n                    },\n                  ],\n                },\n                overlayStyle: {\n                  opacity: current.progress.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [0, 0.5],\n                  }),\n                },\n              };\n            },\n          }}\n        >\n          <Stack.Screen\n            name=\"Feed\"\n            component={Feed}\n            options={{\n              headerTitleAlign: \"center\",\n              headerTitle: (props) => <LogoTitle color={theme.colors.text} />,\n              headerLeft: () => (\n                <TouchableOpacity\n                  style={styles.headerIcon}\n                  onPress={() => toggleTheme()}\n                >\n                  <MaterialCommunityIcons\n                    name={isThemeDark ? \"white-balance-sunny\" : \"weather-night\"}\n                    size={30}\n                    color={theme.colors.text}\n                  />\n                </TouchableOpacity>\n              ),\n            }}\n          />\n          <Stack.Screen\n            name=\"Thread\"\n            component={Thread}\n            options={{\n              headerShown: false,\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </PreferencesContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  headerIcon: {\n    marginHorizontal: 20,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}